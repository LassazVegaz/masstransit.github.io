(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{299:function(t,s,a){"use strict";a.r(s);var e=a(10),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"message-audit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#message-audit"}},[t._v("#")]),t._v(" Message Audit")]),t._v(" "),s("p",[t._v("Due to asynchronous nature of messaging, it is not always easy to find out the message flow.\nStep-into end-to-end debugging is almost impossible to use, especially if message processing\nis done in parallel and consumers perform atomic operations.")]),t._v(" "),s("p",[t._v("To enable better diagnostic and troubleshooting, the audit log, which contains all messages\nthat have been sent and consumed, would provide a great help.")]),t._v(" "),s("p",[t._v("Also, certain systems require keeping the full log of operations, and if all operations are\ndone using messages, storing these messages will satisfy such requirement.")]),t._v(" "),s("p",[t._v("MassTransit supports message audit by using special observers.")]),t._v(" "),s("h2",{attrs:{id:"principles"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#principles"}},[t._v("#")]),t._v(" Principles")]),t._v(" "),s("p",[t._v("Two main parts need to be saved for each message to provide complete audit:")]),t._v(" "),s("ul",[s("li",[t._v("The message itself")]),t._v(" "),s("li",[t._v("Metadata")])]),t._v(" "),s("p",[t._v("Message metadata includes:")]),t._v(" "),s("ul",[s("li",[t._v("Message id")]),t._v(" "),s("li",[t._v("Message type")]),t._v(" "),s("li",[t._v("Context type (Send, Publish or Consume)")]),t._v(" "),s("li",[t._v("Conversation id")]),t._v(" "),s("li",[t._v("Correlation id")]),t._v(" "),s("li",[t._v("Initiator id")]),t._v(" "),s("li",[t._v("Request id (for request/response)")]),t._v(" "),s("li",[t._v("Source address")]),t._v(" "),s("li",[t._v("Destination address")]),t._v(" "),s("li",[t._v("Response address (for request/response)")]),t._v(" "),s("li",[t._v("Fault address")])]),t._v(" "),s("p",[t._v("The audit feature is generic and requires an implementation for the "),s("code",[t._v("IMessageAuditStore")]),t._v(" interface.\nThis interface is very simple and has one method only:")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("Task")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generic-method"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("StoreMessage")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageAuditMetadata")]),t._v(" metadata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Some audit store implementations are included out of the box and described below.")]),t._v(" "),s("p",[t._v("There are three observers that connect to the message pipeline and record them.\nTwo are for messages being sent - send and publish observers; one is for messages that\nare being consumed.")]),t._v(" "),s("p",[t._v("Consume observer is invoked before a message is consumed, so the message is stored to the audit\nstore even if a consumer fails. Send and publish observers are invoked after the message\nhas actually been sent.")]),t._v(" "),s("h2",{attrs:{id:"installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),s("p",[t._v("There are two extensions methods for "),s("code",[t._v("IBusControl")]),t._v(" that enable sent and consumed messages audit.\nConfiguring both looks like this:")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" busControl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConfigureBus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// all usual configuration")]),t._v("\nbusControl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConnectSendAuditObservers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("auditStore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbusControl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConnectConsumeAuditObserver")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("auditStore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("There, the "),s("code",[t._v("auditStore")]),t._v(" is the audit persistent store. Currently available stores include:")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/usage/sagas/ef.html"}},[t._v("Entity Framework")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/usage/sagas/efcore.html"}},[t._v("Entity Framework Core")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/usage/audit/azuretable.html"}},[t._v("Azure Tables")])],1)]),t._v(" "),s("p",[t._v("Please remember that observers need to be configured before the bus starts.")]),t._v(" "),s("h2",{attrs:{id:"filters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filters"}},[t._v("#")]),t._v(" Filters")]),t._v(" "),s("p",[t._v("Sometimes there are messages in the system that are technical. These could be some monitoring and\nhealth check messages, which are being sent often and could pollute the audit log. Another example\ncould be the "),s("code",[t._v("Fault<T>")]),t._v(" events.")]),t._v(" "),s("p",[t._v("In order not to save these messages to the audit store, you can filter them out. You can configure\nthe observers to use message filters like this:")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("busControl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConnectSendAuditObservers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("auditStore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token generic-method"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Ignore")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("HealthCheck"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbusControl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConnectConsumeAuditObserver")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("auditStore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Ignore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[t._v("ServicePoll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[t._v("RubbishEvent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"metadata-factory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#metadata-factory"}},[t._v("#")]),t._v(" Metadata factory")]),t._v(" "),s("p",[t._v("By default, the audit logging feature uses its own, quite complete, metadata collection mechanism.\nHowever, you can implement your own metadata factories to collect more data or different data.")]),t._v(" "),s("p",[t._v("There are two types of metadata factories:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("DefaultConsumeMetadataFactory")]),t._v(" that gets the "),s("code",[t._v("ConsumeObserver")])]),t._v(" "),s("li",[s("code",[t._v("DefaultSendMetadataFactory")]),t._v(" that gets the "),s("code",[t._v("SendObserver")]),t._v(" (which is used for both send and publish)")])]),t._v(" "),s("p",[t._v("Factories are simple classes that implement "),s("code",[t._v("IConsumeMetadataFactory")]),t._v(" or "),s("code",[t._v("ISendMetadataFactory")]),t._v("\ninterfaces and return a new "),s("code",[t._v("MessageAuditMetadata")]),t._v(" object from a given context.\nFor example, the default consume audit metadata factory implementation looks like this:")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MessageAuditMetadata")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ContextType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" contextType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ConversationId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ConversationId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    CorrelationId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CorrelationId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    InitiatorId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InitiatorId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    MessageId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MessageId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    RequestId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RequestId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    DestinationAddress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DestinationAddress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?.")]),t._v("AbsoluteUri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    SourceAddress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SourceAddress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?.")]),t._v("AbsoluteUri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    FaultAddress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FaultAddress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?.")]),t._v("AbsoluteUri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ResponseAddress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ResponseAddress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?.")]),t._v("AbsoluteUri"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Headers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Headers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?.")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?.")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToDictionary")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("To use your own factory, you can use the third parameter when configuring the observers:")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("busControl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConnectSendAuditObservers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("auditStore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MySendContextMetadataFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbusControl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConnectConsumeAuditObserver")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("auditStore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MySendContextMetadataFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);