(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{338:function(s,t,a){"use strict";a.r(t);var n=a(10),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"topology"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#topology"}},[s._v("#")]),s._v(" Topology")]),s._v(" "),t("p",[s._v("In MassTransit, "),t("em",[s._v("Topology")]),s._v(" is how message types are used to configure broker topics (exchanges in RabbitMQ) and queues. Topology is also used to access specific broker capabilities, such as RabbitMQ direct exchanges and routing keys.")]),s._v(" "),t("p",[s._v("Topology is separate from the send, publish, and consume pipelines which are focused more on middleware inside MassTransit. Topology allows conventions to be created that can create message-specific topology configuration at runtime as messages are published and sent.")]),s._v(" "),t("h3",{attrs:{id:"bus-topology"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bus-topology"}},[s._v("#")]),s._v(" Bus Topology")]),s._v(" "),t("p",[s._v("Once the bus is created, access to topology is via the "),t("em",[s._v("Topology")]),s._v(" property on "),t("em",[s._v("IBus")]),s._v(". The "),t("em",[s._v("IBusTopology")]),s._v(" interface is shown below.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("MassTransit")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IBusTopology")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("IPublishTopology")]),s._v(" PublishTopology "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("ISendTopology")]),s._v(" SendTopology "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Returns the publish topology for the specified message type")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("IMessagePublishTopology"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Publish")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Returns the send topology for the specified message type")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("IMessageSendTopology"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Send")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Returns the message topology for the specified message type")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("IMessageTopology"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Message")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Returns the destination address for the specified message type, as a short address.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="messageType">The message type</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="publishAddress"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bool")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("TryGetPublishAddress")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Type")]),s._v(" messageType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("out")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Uri")]),s._v(" publishAddress"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Returns the destination address for the specified message type, as a short address.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="publishAddress"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bool")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("TryGetPublishAddress")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("out")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Uri")]),s._v(" publishAddress"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("The message, publish, and send topologies can be accessed using this interface. It is also possible to retrieve a message's publish address. The "),t("em",[s._v("Topology")]),s._v(" property may support other interfaces, such as a transport-specific host topology. Pattern matching can be used to check the host topology type as shown below.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("BusHostTopologyMatch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tasks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("MassTransit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Program")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("async")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")])]),s._v(" busControl "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Bus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Factory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CreateUsingAzureServiceBus")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cfg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            cfg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Host")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"connection-string"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("busControl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Topology "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IServiceBusBusTopology")]),s._v(" serviceBusTopology"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);