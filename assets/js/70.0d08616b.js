(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{356:function(e,t,s){"use strict";s.r(t);var a=s(10),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"durable-futures"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#durable-futures"}},[e._v("#")]),e._v(" Durable Futures")]),e._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#introduction"}},[e._v("Introduction")])]),t("li",[t("a",{attrs:{href:"#request-response"}},[e._v("Request, Response")])]),t("li",[t("a",{attrs:{href:"#task"}},[e._v("Task")])])])]),t("p"),e._v(" "),t("h2",{attrs:{id:"introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),t("p",[e._v("Durable Futures are a concept I've come up with to address the complexity inherent to a distributed, event-based architecture.")]),e._v(" "),t("p",[e._v("The concepts in this article are covered "),t("a",{attrs:{href:"https://youtube.com/playlist?list=PLx8uyNNs1ri2JeyDGFWfCYyAjOB1GP-t1",target:"_blank",rel:"noopener noreferrer"}},[e._v("in Season 3"),t("OutboundLink")],1),e._v(" of the "),t("a",{attrs:{href:"https://youtube.com/playlist?list=PLx8uyNNs1ri2MBx6BjPum5j9_MMdIfM9C",target:"_blank",rel:"noopener noreferrer"}},[e._v("MassTransit video series on YouTube"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("The code exploring the concepts is "),t("a",{attrs:{href:"https://github.com/MassTransit/Sample-ForkJoint",target:"_blank",rel:"noopener noreferrer"}},[e._v("available on GitHub"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"request-response"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#request-response"}},[e._v("#")]),e._v(" Request, Response")]),e._v(" "),t("p",[e._v("One of the most understood concepts in software development is request/response. In the simplest form, call/return, this conversation pattern between a client and a service, is the most commonly used idiom in software development.")]),e._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" response "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" service"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("request"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),t("p",[e._v("As programming languages have evolved, along with the common use of asynchronous programming models, remote procedure calls (RPC) via HTTP and other protocols, and message-based systems, the most understood pattern continues to be request/response.")]),e._v(" "),t("h4",{attrs:{id:"http-client"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-client"}},[e._v("#")]),e._v(" HTTP Client")]),e._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" responseMessage "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("await")]),e._v(" httpClient"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("GetAsync")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),t("h4",{attrs:{id:"masstransit-request-client"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#masstransit-request-client"}},[e._v("#")]),e._v(" MassTransit Request Client")]),e._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" response "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("await")]),e._v(" client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("GetResponse")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("TResponse"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[e._v("Request")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),t("p",[e._v("In each of these examples, "),t("em",[e._v("await")]),e._v(" is a key enabler. Requests are sent asynchronously over a network connection to the remote service that produces a response which is then delivered to the client.")]),e._v(" "),t("p",[e._v("With HTTP, a connection is maintained by the client on which the response is sent. With MassTransit, a "),t("em",[e._v("requestId")]),e._v(" and "),t("em",[e._v("responseAddress")]),e._v(" passed to the service are used to send the response which is then read from the queue by the client bus and correlated back to the request.")]),e._v(" "),t("p",[t("img",{attrs:{src:"/requestResponse.svg",alt:"Request Response",title:"Request Response"}})]),e._v(" "),t("h2",{attrs:{id:"task"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#task"}},[e._v("#")]),e._v(" Task")]),e._v(" "),t("p",[e._v("The return type, "),t("code",[e._v("Task<T>")]),e._v(", is a C# language feature that represents a "),t("em",[e._v("future")]),e._v(". It's a reference type which means it is only accessible by reference. Since "),t("code",[e._v("Task<T>")]),e._v(" is a future, it promises to deliver at some point:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("T")]),e._v(" "),t("em",[e._v("(completed)")])]),e._v(" "),t("li",[e._v("An exception "),t("em",[e._v("(faulted)")])]),e._v(" "),t("li",[e._v("A task canceled exception "),t("em",[e._v("(canceled)")])])]),e._v(" "),t("p",[t("em",[e._v("I'm intentionally ignoring "),t("code",[e._v("ValueTask<T>")]),e._v(" for now. It behaves similarly but has a few restrictions, one of which being that it should only be evaluated once.")])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("C#")]),e._v(" "),t("p",[e._v("Prior to the addition of "),t("code",[e._v("async")]),e._v(" and "),t("code",[e._v("await")]),e._v(", writing asynchronous code was significantly more complex. "),t("em",[e._v("Continuation passing")]),e._v(" was commonly used, resulting in deeply nested code that was difficult to understand and even more difficult to debug. Without a doubt, "),t("code",[e._v("async")]),e._v(" and "),t("code",[e._v("await")]),e._v(" are two of the best keywords in C#.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);