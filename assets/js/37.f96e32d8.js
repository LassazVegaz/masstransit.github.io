(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{323:function(s,t,a){"use strict";a.r(t);var e=a(10),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"observers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#observers"}},[s._v("#")]),s._v(" Observers")]),s._v(" "),t("p",[s._v("MassTransit supports several message observers allowing received, consumed, sent, and published messages to be monitored. There is a bus observer as well, so that the bus life cycle can be monitored.")]),s._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[s._v("WARNING")]),s._v(" "),t("p",[s._v("Observers should not be used to modify or intercept messages. To intercept messages to add headers or modify message content, create a new or use an existing middleware component.")])]),s._v(" "),t("h2",{attrs:{id:"receive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#receive"}},[s._v("#")]),s._v(" Receive")]),s._v(" "),t("p",[s._v("To observe messages as they are received by the transport, create a class that implements the "),t("code",[s._v("IReceiveObserver")]),s._v(" interface, and connect it to the bus as shown below.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("MassTransit")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tasks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// An observer that can monitor a receive endpoint to track message consumption at the")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// endpoint level.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IReceiveObserver")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when a message has been delivered by the transport is about to be received by the endpoint")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The receive context of the message</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PreReceive")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReceiveContext")]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the message has been received and acknowledged on the transport")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The receive context of the message</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PostReceive")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReceiveContext")]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when a message has been consumed by a consumer")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The message consume context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="duration">The consumer duration</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="consumerType">The consumer type</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PostConsume")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumeContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeSpan")]),s._v(" duration"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")])]),s._v(" consumerType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when a message being consumed produced a fault")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The message consume context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="duration">The consumer duration</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="consumerType">The consumer type</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="exception">The exception from the consumer</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ConsumeFault")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumeContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeSpan")]),s._v(" duration"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")])]),s._v(" consumerType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the transport receive faults")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The receive context of the message</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="exception">The exception that was thrown</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ReceiveFault")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReceiveContext")]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("To configure a receive observer, add it to the container using one of the methods shown below. The factory method version allows customization of the observer creation. When a container is not being used, the "),t("code",[s._v("ConnectReceiveObserver")]),s._v(" bus method can be used instead.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddReceiveObserver")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("ReceiveObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddReceiveObserver")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("provider "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("ReceiveObserver")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h2",{attrs:{id:"consume"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#consume"}},[s._v("#")]),s._v(" Consume")]),s._v(" "),t("p",[s._v("If the "),t("code",[s._v("ReceiveContext")]),s._v(" isn't fascinating enough for you, perhaps the actual consumption of messages might float your boat. A consume observer implements the "),t("code",[s._v("IConsumeObserver")]),s._v(" interface, as shown below.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("MassTransit")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tasks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Intercepts the ConsumeContext")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IConsumeObserver")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called before a message is dispatched to any consumers")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The consume context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PreConsume")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumeContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called after the message has been dispatched to all consumers - note that in the case of an exception")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// this method is not called, and the DispatchFaulted method is called instead")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PostConsume")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumeContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called after the message has been dispatched to all consumers when one or more exceptions have occurred")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="exception"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ConsumeFault")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumeContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("To configure a consume observer, add it to the container using one of the methods shown below. The factory method version allows customization of the observer creation. When a container is not being used, the "),t("code",[s._v("ConnectConsumeObserver")]),s._v(" bus method can be used instead.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddConsumeObserver")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("ConsumeObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddConsumeObserver")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("provider "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("ConsumeObserver")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h3",{attrs:{id:"consume-message"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#consume-message"}},[s._v("#")]),s._v(" Consume Message")]),s._v(" "),t("p",[s._v("Okay, so it's obvious that if you've read this far you want a more specific observer, one that only is called when a specific message type is consumed. We have you covered there too, as shown below.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("MassTransit")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tasks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Intercepts the ConsumeContext")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IConsumeMessageObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called before a message is dispatched to any consumers")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The consume context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PreConsume")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumeContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called after the message has been dispatched to all consumers - note that in the case of an exception")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// this method is not called, and the DispatchFaulted method is called instead")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PostConsume")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumeContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called after the message has been dispatched to all consumers when one or more exceptions have occurred")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="exception"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ConsumeFault")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumeContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("To connect the observer, use the "),t("code",[s._v("ConnectConsumeMessageObserver")]),s._v(" method before starting the bus.")]),s._v(" "),t("blockquote",[t("p",[s._v("The "),t("code",[s._v("ConsumeObserver<T>")]),s._v(" interface may be deprecated at some point, it's sort of a legacy observer that isn't recommended.")])]),s._v(" "),t("h2",{attrs:{id:"send"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#send"}},[s._v("#")]),s._v(" Send")]),s._v(" "),t("p",[s._v("Okay, so, incoming messages are not your thing. We get it, you're all about what goes out. It's cool. It's better to send than to receive. Or is that give? Anyway, a send observer is also available.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("MassTransit")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tasks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Observes messages as they are sent to transports. These should not be used to intercept or")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// filter messages, in that case a filter should be created and registered on the transport.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ISendObserver")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called before the message is sent to the transport")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The message send context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PreSend")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SendContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called after the message is sent to the transport (and confirmed by the transport if supported)")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The message send context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PostSend")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SendContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the message fails to send to the transport, including the exception that was thrown")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The message send context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="exception">The exception from the transport</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("SendFault")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SendContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("To configure a send observer, add it to the container using one of the methods shown below. The factory method version allows customization of the observer\ncreation. When a container is not being used, the "),t("code",[s._v("ConnectSendObserver")]),s._v(" bus method can be used instead.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddSendObserver")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("SendObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddSendObserver")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("provider "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("SendObserver")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h2",{attrs:{id:"publish"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#publish"}},[s._v("#")]),s._v(" Publish")]),s._v(" "),t("p",[s._v("In addition to send, publish is also observable. Because the semantics matter, absolutely. Using the MessageId to link them up as it's unique for each message. Remember that Publish and Send are two distinct operations so if you want to observe all messages that are leaving your service, you have to connect both Publish and Send observers.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("MassTransit")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tasks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Observes messages as they are published via a publish endpoint. These should not be used to intercept or")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// filter messages, in that case a filter should be created and registered on the transport.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IPublishObserver")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called before the message is sent to the transport")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The message send context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PrePublish")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PublishContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called after the message is sent to the transport (and confirmed by the transport if supported)")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The message send context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PostPublish")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PublishContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the message fails to send to the transport, including the exception that was thrown")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The message send context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="exception">The exception from the transport</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PublishFault")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PublishContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("To configure a public observer, add it to the container using one of the methods shown below. The factory method version allows customization of the observer\ncreation. When a container is not being used, the "),t("code",[s._v("ConnectPublishObserver")]),s._v(" bus method can be used instead.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddPublishObserver")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("PublishObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddPublishObserver")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("provider "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("PublishObserver")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h2",{attrs:{id:"bus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bus"}},[s._v("#")]),s._v(" Bus")]),s._v(" "),t("p",[s._v("To observe bus life cycle events, create a class which implements "),t("code",[s._v("IBusObserver")]),s._v(", as shown below.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("\ufeff"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("MassTransit")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tasks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Used to observe events produced by the bus")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IBusObserver")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called after the bus has been created.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="bus"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PostCreate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IBus")]),s._v(" bus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the bus fails to be created")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="exception"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CreateFaulted")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the bus is being started, before the actual Start commences.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="bus"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PreStart")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IBus")]),s._v(" bus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called once the bus has started and is running")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="bus"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="busReady">')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// A task which is completed once the bus is ready and all receive endpoints are ready.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </param>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PostStart")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IBus")]),s._v(" bus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Task"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("BusReady"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" busReady"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the bus fails to start")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="bus"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="exception"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("StartFaulted")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IBus")]),s._v(" bus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the bus is being stopped, before the actual Stop commences.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="bus"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PreStop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IBus")]),s._v(" bus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the bus has been stopped.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="bus"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PostStop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IBus")]),s._v(" bus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the bus failed to Stop.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="bus"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="exception"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("StopFaulted")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IBus")]),s._v(" bus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("To configure a bus observer, add it to the container using one of the methods shown below. The factory method version allows customization of the observer creation.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddBusObserver")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("BusObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddBusObserver")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("provider "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("BusObserver")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h2",{attrs:{id:"receive-endpoint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#receive-endpoint"}},[s._v("#")]),s._v(" Receive Endpoint")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("MassTransit")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tasks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Used to observe the events signaled by a receive endpoint")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IReceiveEndpointObserver")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the receive endpoint is ready to receive messages")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="ready"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Ready")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReceiveEndpointReady")]),s._v(" ready"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the receive endpoint is being stopped, prior to actually stopping")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="stopping"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Stopping")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReceiveEndpointStopping")]),s._v(" stopping"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the receive endpoint has completed")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="completed"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Completed")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReceiveEndpointCompleted")]),s._v(" completed"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the receive endpoint faults")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="faulted"></param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Faulted")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReceiveEndpointFaulted")]),s._v(" faulted"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("To configure a receive endpoint observer, add it to the container using one of the methods shown below. The factory method version allows customization of the observer creation.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddReceiveEndpointObserver")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("ReceiveEndpointObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddReceiveEndpointObserver")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("provider "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("ReceiveEndpointObserver")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h2",{attrs:{id:"state-machine-event"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#state-machine-event"}},[s._v("#")]),s._v(" State Machine Event")]),s._v(" "),t("p",[s._v("To observe events consumed by a saga state machine, use an "),t("code",[s._v("IEventObserver<T>")]),s._v(" where "),t("code",[s._v("T")]),s._v(" is the saga instance type.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("MassTransit")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tasks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IEventObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("TSaga"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TSaga")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ISaga")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called before the event context is delivered to the activities")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The event context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PreExecute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BehaviorContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("TSaga"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called before the event context is delivered to the activities")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The event data type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The event context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PreExecute")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BehaviorContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("TSaga"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the event has been processed by the activities")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The event context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PostExecute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BehaviorContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("TSaga"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the event has been processed by the activities")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The event data type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The event context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PostExecute")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BehaviorContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("TSaga"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the activity execution faults and is not handled by the activities")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The event context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="exception">The exception that was thrown</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ExecuteFault")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BehaviorContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("TSaga"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Called when the activity execution faults and is not handled by the activities")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <typeparam name="T">The message type</typeparam>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The event context</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="exception">The exception that was thrown</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ExecuteFault")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BehaviorContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("TSaga"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" exception"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("To configure an event observer, add it to the container using one of the methods shown below. The factory method version allows customization of the\nobserver creation.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddEventObserver")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" EventObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddEventObserver")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("provider "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("EventObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h2",{attrs:{id:"state-machine-state"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#state-machine-state"}},[s._v("#")]),s._v(" State Machine State")]),s._v(" "),t("p",[s._v("To observe state changes that happen in a saga state machine, use an "),t("code",[s._v("IStateObserver<T>")]),s._v(" where "),t("code",[s._v("T")]),s._v(" is the saga instance type.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("MassTransit")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Threading"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Tasks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IStateObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("TSaga"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TSaga")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token type-list"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ISaga")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Invoked prior to changing the state of the state machine")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="context">The instance context of the state machine</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="currentState">The current state (after the change)</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="previousState">The previous state (before the change)</param>')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns></returns>")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s._v("Task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("StateChanged")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BehaviorContext"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("TSaga"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("State")]),s._v(" currentState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("State")]),s._v(" previousState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("To configure a state observer, add it to the container using one of the methods shown below. The factory method version allows customization of the\nobserver creation.")]),s._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddStateObserver")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" StateObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[s._v("services"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token generic-method"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("AddStateObserver")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("provider "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("StateObserver"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("T"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);