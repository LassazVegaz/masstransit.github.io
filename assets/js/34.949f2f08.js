(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{320:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"diagnosticsource"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diagnosticsource"}},[t._v("#")]),t._v(" DiagnosticSource")]),t._v(" "),s("p",[t._v("MassTransit uses Microsoft's "),s("code",[t._v("System.Diagnostics.DiagnosticSource")]),t._v(" to emit diagnostic events. This allows almost every metric trace provider to connect to MassTransit and monitor it.")]),t._v(" "),s("p",[t._v("To connect, set the current log context prior to bus configuration using:")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("Task")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" subscription "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DiagnosticListener"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AllListeners"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Subscribe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("DiagnosticObserver")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" busControl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Bus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Factory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateUsingInMemory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cfg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiagnosticObserver")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token type-list"}},[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IObserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("DiagnosticListener"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("OnCompleted")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("OnError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("OnNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiagnosticListener")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MassTransit"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// subscribe to the listener with your monitoring tool, etc.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("That's it! Magic is done. Now you need to choose your Trace provider (for example: "),s("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/application-insights/app-insights-create-new-resource#create-an-application-insights-resource-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Application Insights"),s("OutboundLink")],1),t._v(", "),s("a",{attrs:{href:"https://github.com/opentracing-contrib/csharp-netcore",target:"_blank",rel:"noopener noreferrer"}},[t._v("OpenTracing"),s("OutboundLink")],1),t._v(") and configure to read metrics from your "),s("code",[t._v("DiagnosticSource")]),t._v(".")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("OpenTracing.Contrib.NetCore")]),t._v(" library subscribes to every diagnostic source under the hood it doesn't require any interaction from your side,\nhowever it neither propagates the remote context nor injects the current context to message headers, so the trace will be\nlimited to local operations. Also, it won't use "),s("code",[t._v("TraceId")]),t._v(" and "),s("code",[t._v("SpanId")]),t._v(" from the "),s("code",[t._v("Activity")]),t._v(" even when you set the activity default id format to "),s("code",[t._v("W3C")]),t._v(",\nthose ids will be random and cannot be associated with "),s("code",[t._v("ActivityId")]),t._v(".")]),t._v(" "),s("p",[t._v("To enable "),s("code",[t._v("Application Insights")]),t._v(", add it to the "),s("code",[t._v("Startup")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConfigureServices")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IServiceCollection")]),t._v(" services"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    services"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token generic-method"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConfigureTelemetryModule")]),s("span",{pre:!0,attrs:{class:"token generic class-name"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("DependencyTrackingTelemetryModule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IncludeDiagnosticSourceActivities"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Listener.Name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    services"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddApplicationInsightsTelemetry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"InstrumentationKey"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"available-diagnostic-events"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#available-diagnostic-events"}},[t._v("#")]),t._v(" Available diagnostic events")]),t._v(" "),s("p",[t._v("You can subscribe to different types of diagnostic events produced by MassTransit.\nBelow is the list of names of MassTransit diagnostic sources. Keep in mind that each\noperation produces "),s("code",[t._v("Start")]),t._v(" and "),s("code",[t._v("Stop")]),t._v(" events using the "),s("code",[t._v("Activity")]),t._v(". So, when a message is\nconsumed, you get "),s("code",[t._v("MassTransit.Consumer.Consume.Start")]),t._v(" event before the consumer is executed and\n"),s("code",[t._v("MassTransit.Consumer.Consume.Stop")]),t._v(" after the message is consumed.")]),t._v(" "),s("h4",{attrs:{id:"transport"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transport"}},[t._v("#")]),t._v(" Transport")]),t._v(" "),s("ul",[s("li",[t._v("MassTransit.Transport.Send")]),t._v(" "),s("li",[t._v("MassTransit.Transport.Receive")])]),t._v(" "),s("h4",{attrs:{id:"consumer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#consumer"}},[t._v("#")]),t._v(" Consumer")]),t._v(" "),s("ul",[s("li",[t._v("MassTransit.Consumer.Consume")]),t._v(" "),s("li",[t._v("MassTransit.Consumer.Handle")])]),t._v(" "),s("h4",{attrs:{id:"saga"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#saga"}},[t._v("#")]),t._v(" Saga")]),t._v(" "),s("ul",[s("li",[t._v("MassTransit.Saga.Send")]),t._v(" "),s("li",[t._v("MassTransit.Saga.SendQuery")]),t._v(" "),s("li",[t._v("MassTransit.Saga.Initiate")]),t._v(" "),s("li",[t._v("MassTransit.Saga.Orchestrate")]),t._v(" "),s("li",[t._v("MassTransit.Saga.Observe")]),t._v(" "),s("li",[t._v("MassTransit.Saga.RaiseEvent")])]),t._v(" "),s("h4",{attrs:{id:"courier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#courier"}},[t._v("#")]),t._v(" Courier")]),t._v(" "),s("ul",[s("li",[t._v("MassTransit.Activity.Execute")]),t._v(" "),s("li",[t._v("MassTransit.Activity.Compensate")])]),t._v(" "),s("h3",{attrs:{id:"additional-resources"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#additional-resources"}},[t._v("#")]),t._v(" Additional resources")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/dotnet/runtime/blob/master/src/libraries/System.Diagnostics.DiagnosticSource/src/ActivityUserGuide.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Activity User Guide"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/dotnet/runtime/blob/master/src/libraries/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("DiagnosticSource User Guide"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);