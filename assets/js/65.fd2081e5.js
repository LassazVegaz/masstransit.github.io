(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{351:function(s,e,t){"use strict";t.r(e);var a=t(10),n=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"interoperability"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#interoperability"}},[s._v("#")]),s._v(" Interoperability")]),s._v(" "),e("p",[s._v("In MassTransit, developers specify types for messages. MassTransit's serializers then perform the hard work of converting the types to the serializer format (such as JSON, XML, BSON, etc.) and then back again.")]),s._v(" "),e("p",[s._v("To interoperate with other languages and platforms, the message structure is important.")]),s._v(" "),e("h3",{attrs:{id:"content-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#content-type"}},[s._v("#")]),s._v(" Content type")]),s._v(" "),e("p",[s._v("To support custom message types, MassTransit uses a transport-level header to specify the message format. MassTransit simultaneously supports the following message formats on a single transport.")]),s._v(" "),e("ul",[e("li",[s._v("json (application/vnd.masstransit+json)")]),s._v(" "),e("li",[s._v("bson (application/vnd.masstransit+bson)")]),s._v(" "),e("li",[s._v("xml  (application/vnd.masstransit+xml)")])]),s._v(" "),e("p",[s._v("If you enable encryption:")]),s._v(" "),e("ul",[e("li",[s._v("aes  (application/vnd.masstransit+aes)")]),s._v(" "),e("li",[s._v("aes  (application/vnd.masstransit.v2+aes)")])]),s._v(" "),e("p",[s._v("If you configure the binary serializer:")]),s._v(" "),e("ul",[e("li",[s._v("binary (application/vnd.masstransit+binary)")])]),s._v(" "),e("p",[s._v("Register custom types would during endpoint/bus configuration.")]),s._v(" "),e("h3",{attrs:{id:"json-bson-xml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#json-bson-xml"}},[s._v("#")]),s._v(" JSON/BSON/XML")]),s._v(" "),e("p",[s._v("MassTransit uses a message envelope to encapsulate the built-in message headers, as well as the message payload. The envelope properties on the wire include:")]),s._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" MessageId\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" CorrelationId\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" ConversationId\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" InitiatorId\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" RequestId\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" SourceAddress\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" DestinationAddress\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" ResponseAddress\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" FaultAddress\nDateTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?")]),s._v(" ExpirationTime\nDateTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?")]),s._v(" SentTime\nIDictionary"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Headers\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("object")]),s._v(" Message\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" MessageType\nHostInfo Host\n")])])]),e("p",[s._v("The "),e("em",[s._v("Id")]),s._v(" values should be convertible to a GUID/UUID or they will fail. All are optional, but MessageId should be present at a minimum.")]),s._v(" "),e("p",[s._v("The "),e("em",[s._v("Address")]),s._v(" values should be convertible to a URI that is a valid MassTransit endpoint address.")]),s._v(" "),e("p",[s._v("The "),e("em",[s._v("MessageType")]),s._v(" entries should be URNs, which are convertible to .NET types. MassTransit defines the format of the URN in the following structure:")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("urn:message:Namespace:TypeName\n")])])]),e("p",[s._v("Examples include:")]),s._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("urn:message:MyProject.Messages:UpdateAccount\nurn:message:MyProject.Messages.Events:AccountUpdated\nurn:message:MyProject:ChangeAccount\nurn:message:MyProject.AccountService:MyService+AccountUpdatedEvent\n")])])]),e("p",[s._v("The last one is a nested class, as indicated by the '+' symbol.")]),s._v(" "),e("p",[s._v("The "),e("em",[s._v("Host")]),s._v(" is an internal data type, but is a set of strings that define the host that produced the message.")]),s._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" MachineName\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" ProcessName\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" ProcessId\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" Assembly\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" AssemblyVersion\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" FrameworkVersion\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" MassTransitVersion\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" OperatingSystemVersion\n")])])]),e("h4",{attrs:{id:"example-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-message"}},[s._v("#")]),s._v(" Example message")]),s._v(" "),e("p",[s._v("This is a minimal message:")]),s._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"message"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"value"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Some Value"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"customerId"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("27")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"messageType"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"urn:message:MassTransit.Tests:ValueMessage"')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);