(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{352:function(t,e,s){"use strict";s.r(e);var a=s(10),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"newid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#newid"}},[t._v("#")]),t._v(" NewId")]),t._v(" "),e("p",[t._v("NewId generates sequential unique identifiers that are 128-bit (16-bytes) and fit nicely into a "),e("code",[t._v("Guid")]),t._v(". It was inspired from "),e("a",{attrs:{href:"https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Snowflake"),e("OutboundLink")],1),t._v(" and "),e("a",{attrs:{href:"https://github.com/boundary/flake",target:"_blank",rel:"noopener noreferrer"}},[t._v("flake"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"the-problem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-problem"}},[t._v("#")]),t._v(" The Problem")]),t._v(" "),e("p",[t._v("Many applications use unique identifiers to identify data. Common approaches applications use to generate unique identifiers in a relational database delegate identifier generation to the database, using an identity column or another similar auto-incrementing value.")]),t._v(" "),e("p",[t._v("While this approach can be adequate for a small application, it quickly becomes a bottleneck at scale. And it's a common problem, as evidenced by "),e("a",{attrs:{href:"https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("this post"),e("OutboundLink")],1),t._v(" from Twitter Engineering in 2010.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Quote")]),t._v(" "),e("p",[t._v("We needed something that could generate tens of thousands of ids per second in a highly available manner. This naturally led us to choose an uncoordinated approach.")])]),t._v(" "),e("p",[t._v("A key use case, specifically related to MassTransit, is applications that use messages to communicate between services – which is common in a service-based architecture. In these applications, sequential identifiers generated by NewId can serve dual purposes. First and foremost, it is a sequential unique identifier. Second, it is also a timestamp, as every NewId includes a UTC timestamp.")]),t._v(" "),e("h3",{attrs:{id:"why-does-order-matter-now"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why-does-order-matter-now"}},[t._v("#")]),t._v(" Why does order matter now?")]),t._v(" "),e("p",[t._v("For a .NET developer, it is easy to reach for "),e("code",[t._v("Guid.NewGuid()")]),t._v(" and run with it. And while that works, the identifiers created are not sequential. They're completely randomized. And when it comes to data, being able to sort it matters. Using a "),e("em",[t._v("uniqueidentifier")]),t._v(" column as a primary key clustered index with SQL Server was frowned upon for years because it caused massive index fragmentation. This led developers to use an "),e("em",[t._v("int")]),t._v(" (or "),e("em",[t._v("bigint")]),t._v(" once they realized that four billion isn't a lot) primary key and create a separate unique index on the "),e("em",[t._v("uniqueidentifier")]),t._v(" column (to use the AK, one might say, it wasn't a good day).")]),t._v(" "),e("h2",{attrs:{id:"the-solution"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-solution"}},[t._v("#")]),t._v(" The Solution")]),t._v(" "),e("p",[t._v("NewId was created to solve the problem. NewId generates sequential 128-bit identifiers that are collation compatible with SQL Server as a clustered primary key. Using the host MAC address, along with an optional offset (in case multiple processes are on the same host), combined with a timestamp and an incrementing sequence number, generate identifiers are unique across a network of systems and can be safely inserted into a database without conflicts.")]),t._v(" "),e("blockquote",[e("p",[t._v("NewId is largely inspired by the "),e("a",{attrs:{href:"https://github.com/boundary/flake",target:"_blank",rel:"noopener noreferrer"}},[t._v("Erlang library flake"),e("OutboundLink")],1),t._v(", which adopted an approach of generating 128-bit, k-ordered ids (read time-ordered lexically) using the machines MAC, timestamp and a per-thread sequence number. These identifiers are sequential and do not collide in a cluster of nodes running applications that use these as UUIDs.")])]),t._v(" "),e("h2",{attrs:{id:"using-newid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-newid"}},[t._v("#")]),t._v(" Using NewId")]),t._v(" "),e("p",[t._v("NewIds can be generated using one of two methods. The first returns a "),e("code",[t._v("NewId")]),t._v(", whereas the second returns a "),e("code",[t._v("Guid")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NewId")]),t._v(" newId "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NewId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Next")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Guid")]),t._v(" guid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NewId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NextGuid")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("NewId implements many of the same methods and constructors as "),e("em",[t._v("Guid")]),t._v(", and can be converted to and from a "),e("em",[t._v("Guid")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Formats to 11790000-CF25-B808-2365-08D36732603A")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" identifier "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NewId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Next")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"D"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToUpperInvariant")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Convert from a string")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NewId")]),t._v(" newId "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("NewId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"11790000-cf25-b808-dc58-08d367322210"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Convert from a byte array")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" bytes "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("54")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("74")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("75")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("44")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("41")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("86")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NewId")]),t._v(" newId "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("NewId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bytes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),e("p",[t._v("Some features of NewId can be configured.")]),t._v(" "),e("h4",{attrs:{id:"process-id"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#process-id"}},[t._v("#")]),t._v(" Process Id")]),t._v(" "),e("p",[t._v("In cases where multiple processes are on the same host generating identifiers, it may be necessary to include the "),e("em",[t._v("processId")]),t._v(" when generating identifiers. To enable the use of the "),e("em",[t._v("processId")]),t._v(", call the method below on startup.")]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[t._v("NewId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetProcessIdProvider")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("CurrentProcessIdProvider")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("This will replace two of the six network address bytes with the current "),e("em",[t._v("processId")]),t._v(".")]),t._v(" "),e("div",{staticClass:"custom-block danger"},[e("p",{staticClass:"custom-block-title"},[t._v("DANGER")]),t._v(" "),e("p",[t._v("There are situations where using a predictable, sequential identifier is discouraged – cases where unpreditability is a desired feature. These include:")]),t._v(" "),e("ul",[e("li",[t._v("Generating passwords")]),t._v(" "),e("li",[t._v("Creating security tokens")]),t._v(" "),e("li",[t._v("Anything where someone should not be able to guess an identifier")])]),t._v(" "),e("p",[t._v("NewId generated identifiers may expose the MAC address of the machine that generated the identifier along with the time the identifier was generated. While this isn't typically an issue in the modern world of networked computers with soft MAC addresses, some security-sensitive applications may need to be aware of the algorithm and any ramifications.")]),t._v(" "),e("p",[t._v("Oh, and "),e("strong",[t._v("don't")]),t._v(" do modulo 2 arithmetic on NewId-generated Guids with an expectation of random distribution.")])])])}),[],!1,null,null,null);e.default=n.exports}}]);